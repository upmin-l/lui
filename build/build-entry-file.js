const path = require('path');
const fs = require('fs');

const renderString = require('json-templater/string');
const upperCamelcase = require('uppercamelcase')

const components = require('../components.json')

const IMPORT_TEMPLATE = 'import {{name}} from \'../src/packages/{{package}}/index.js\';'
const endOfLine = require('os').EOL;
const OUTPUT_PATH = path.join(__dirname, '../src/index.js');
const chalk = require('chalk')
const MAIN_TEMPLATE = ` /* Automatically generated by './build/bin/build-entry.js' */
{{filePath}}
const components = [
    {{install}}
]
const install = function (Vue) {
    components.map(v => {
        Vue.component(v.name,v)
    })
    Vue.component(lContextMenu.lContextMenuSubMenu.name,lContextMenu.lContextMenuSubMenu)
    Vue.component(lLoading.loading.name,lLoading.loading)
    Vue.component(lContextMenu.lContextMenu.name,lContextMenu.lContextMenu)
    Vue.use(lContextMenu.contextMenu_directive);
    Vue.use(lLoading.loading_directive);
    Vue.config.globalProperties.$contextMenu = lContextMenu.contextMenu_directive

}
const lUi = {
  install
}
export{
  {{install}}
}
export default lUi
`
const ComponentNames = Object.keys(components);
const includeComponentTemplate = [];
const installTemplate = [];
ComponentNames.forEach(item => {
    let componentName = upperCamelcase(item);
    includeComponentTemplate.push(renderString(IMPORT_TEMPLATE, {
        name: `l${componentName}`,
        package: item
    }))
    installTemplate.push(renderString('{{name}}', {
        name: `l${componentName}`,
        component: item
    }))
})
const template = renderString(MAIN_TEMPLATE, {
    filePath: includeComponentTemplate.join(endOfLine),
    install: installTemplate.join(',' + endOfLine)
})
fs.writeFile(OUTPUT_PATH, template, (err) => {
    if (err) {
        console.log(chalk.red(`================================================`))
        console.log(chalk.red(`=  ${err} =`))
        console.log(chalk.red(`================================================`))
        return
    }
    console.log(chalk.green(`================================================`))
    console.log(chalk.green(`  生成组件入口文件成功 `))
    console.log(chalk.green(`(the component entry file was generated success)`))
    console.log(chalk.green(`================================================`))
});

